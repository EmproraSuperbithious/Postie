[{"title":"Postie","type":0,"sectionRef":"#","url":"/Postie/api/Postie","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#functions","content":" "},{"title":"invokeClient​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#invokeClient","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Postie.invokeClient( player: Player ,-- The client player to invoke. id: string,-- The identification for the invocation. timeOut: number,-- Yield until timeOut (given in seconds) is reached. ...: any-- Additional data to send to the client. ) → ( boolean,-- Returns true if the server received a response, false otherwise. ...-- Additional data returned from the the client. ) Invoke client with sent data. If the invocation reaches the client, but the client doesn't have a corresponding callback, return before timeOut regardless but return false.  "},{"title":"invokeServer​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#invokeServer","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Postie.invokeServer( id: string,-- The identification for the invocation. timeOut: number,-- Yield until timeOut (given in seconds) is reached. ...: any-- Additional data to send to the server. ) → ( boolean,-- Returns true if the client received a response, false otherwise. ...-- Additional data returned from the server. ) Invoke the server with sent data. If the invocation reaches the server, but the server doesn't have a corresponding callback, return before timeOut regardless but return false.  "},{"title":"setCallback​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#setCallback","content":"&lt;/&gt; Postie.setCallback( id: string,-- The identification for the invocation. callback: Callback?-- The callback function to set. ) → () Set the callback that is invoked when an invocation identified by id is sent. Data sent with the invocation are passed to the callback. If on the server, the player who invoked is implicitly received as the first argument.  "},{"title":"getCallback​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#getCallback","content":"&lt;/&gt; Postie.getCallback( id: string-- The identification for the callback. ) → callback-- The corresponding callback function, if it exists. Return the callback corresponding with id. "},{"title":"Examples","type":0,"sectionRef":"#","url":"/Postie/docs/examples","content":"","keywords":""},{"title":"Client → Server​","type":1,"pageTitle":"Examples","url":"/Postie/docs/examples#client--server","content":"-- Context: Client local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Postie = require(ReplicatedStorage.Packages.Postie) local isOk, newPart = Postie.invokeServer(&quot;createPart&quot;, 5, Color3.fromRGB(255, 0, 0), Vector3.new(0, 25, -20)) if isOk then print(&quot;The server created the requested part:&quot;, newPart) else print(&quot;The server wasn't able to create the part...&quot;) end  -- Context: Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Postie = require(ReplicatedStorage.Packages.Postie) local function onCreatePart(player, partColor, partPosition) local newPart = Instance.new(&quot;Part&quot;) newPart.Color = partColor newPart.Position = partPosition newPart.Parent = workspace return newPart end Postie.setCallback(&quot;createPart&quot;, onCreatePart)  "},{"title":"Why Postie?","type":0,"sectionRef":"#","url":"/Postie/docs/intro","content":"Why Postie? Issues with calling InvokeClient in a RemoteFunction: If the client throws an error, the server throws the error too.If the client disconnects while it's being invoked, InvokeClient throws an error.If the client doesn't return a value, the server yields forever. Postie solves all three of these problems by replacing one RemoteFunction invocation with two RemoteEvent firings.","keywords":""}]