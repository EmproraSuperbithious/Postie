[{"title":"Installation","type":0,"sectionRef":"#","url":"/Postie/docs/setup","content":"Installation Install Wally by following these instructions.Copy the latest version of Postie from the package page, and paste it as a dependency into wally.toml. wally.toml # This is a truncated wally.toml file! # Learn more about the wally manifest format: # https://github.com/UpliftGames/wally?tab=readme-ov-file#manifest-format [dependencies] postie = &quot;superbithious/postie@X.X.X&quot; # ^ ^ ^ # Remember to get the latest package version from the wally website. # https://wally.run/package/superbithious/postie Run wally install to fetch the packages.Sync the Packages folder using Rojo. Setup For Postie to work, you need to require it atleast ONCE on the server side. -- A Script in ServerScriptService local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Postie = require(path.to.Postie) ","keywords":""},{"title":"Why Postie","type":0,"sectionRef":"#","url":"/Postie/docs/intro","content":"","keywords":""},{"title":"Issues with RemoteFunctions​","type":1,"pageTitle":"Why Postie","url":"/Postie/docs/intro#issues-with-remotefunctions","content":"Postie aims to solve a few issues with calling InvokeClient in a RemoteFunction: If the client throws an error, the server will throw an error too.If the client disconnects while it's being invoked, InvokeClient throws an error.If the client doesn't return a value, the server will yield forever. Postie solves all three of these problems by replacing RemoteFunctions with RemoteEvents. "},{"title":"Simple and Friendly API​","type":1,"pageTitle":"Why Postie","url":"/Postie/docs/intro#simple-and-friendly-api","content":"Postie's API is small and very similar to RemoteFunctions. You won't need to remember much to work with this library. "},{"title":"Examples","type":0,"sectionRef":"#","url":"/Postie/docs/examples","content":"","keywords":""},{"title":"Client → Server​","type":1,"pageTitle":"Examples","url":"/Postie/docs/examples#client--server","content":"client.luau -- Context: Client local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Postie = require(ReplicatedStorage.Packages.Postie) local timeout = 5 local withColor = Color3.fromRGB(255, 0, 0) local atPosition = Vector3.new(0, 25, -20) local isOk, newPart = Postie.invokeServer(&quot;createPart&quot;, timeout, withColor, atPosition) if isOk then print(&quot;The server created the requested part:&quot;, newPart) else print(&quot;The server wasn't able to create the part...&quot;) end  server.luau -- Context: Server local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Postie = require(ReplicatedStorage.Packages.Postie) local function onCreatePart(player, partColor, partPosition) local newPart = Instance.new(&quot;Part&quot;) newPart.Color = partColor newPart.Position = partPosition newPart.Parent = workspace return newPart end Postie.setCallback(&quot;createPart&quot;, onCreatePart)  "},{"title":"Postie","type":0,"sectionRef":"#","url":"/Postie/api/Postie","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#functions","content":" "},{"title":"invokeClient​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#invokeClient","content":"This item only works when running on the server. Server This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Postie.invokeClient( player: Player ,-- The client player to invoke. id: string,-- The identification for the invocation. timeOut: number,-- Yield until timeOut (given in seconds) is reached. ...: any-- Additional data to send to the client. ) → ( boolean,-- Returns true if the server received a response, false otherwise. ...-- Additional data returned from the the client. ) Invoke client with sent data. If the invocation reaches the client, but the client doesn't have a corresponding callback, return before timeOut regardless but return false.  "},{"title":"invokeServer​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#invokeServer","content":"This item only works when running on the client. Client This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Postie.invokeServer( id: string,-- The identification for the invocation. timeOut: number,-- Yield until timeOut (given in seconds) is reached. ...: any-- Additional data to send to the server. ) → ( boolean,-- Returns true if the client received a response, false otherwise. ...-- Additional data returned from the server. ) Invoke the server with sent data. If the invocation reaches the server, but the server doesn't have a corresponding callback, return before timeOut regardless but return false.  "},{"title":"setCallback​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#setCallback","content":"&lt;/&gt; Postie.setCallback( id: string,-- The identification for the invocation. callback: Callback?-- The callback function to set. ) → () Set the callback that is invoked when an invocation identified by id is sent. Data sent with the invocation are passed to the callback. If on the server, the player who invoked is implicitly received as the first argument.  "},{"title":"getCallback​","type":1,"pageTitle":"Postie","url":"/Postie/api/Postie#getCallback","content":"&lt;/&gt; Postie.getCallback( id: string-- The identification for the callback. ) → callback-- The corresponding callback function, if it exists. Return the callback corresponding with id. "}]